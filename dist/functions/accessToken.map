{"version":3,"sources":["../node_modules/node-fetch/browser.js","accessToken.js"],"names":["module","exports","self","fetch","default","bind","Headers","Request","Response","handler","event","context","callback","CLIENT_ID","CLIENT_SECRET","REDIRECT_URL","CODE","queryStringParameters","code","STATE","state","data","grant_type","client_id","redirect_uri","client_secret","ACCESS_TOKEN_URL","method","body","JSON","stringify","headers","then","res","json","result","statusCode","catch","e","console","log","error","message"],"mappings":";AAAA,aAEAA,OAAOC,QAAUA,QAAUC,KAAKC,MAGhCF,QAAQG,QAAUF,KAAKC,MAAME,KAAKH,MAElCD,QAAQK,QAAUJ,KAAKI,QACvBL,QAAQM,QAAUL,KAAKK,QACvBN,QAAQO,SAAWN,KAAKM;;ACPxB,aAFA,IAAA,EAAA,EAAA,QAAA,eAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAAP,QAAQQ,QAAU,SAASC,EAAOC,EAASC,GACjCC,IAAAA,EAAN,GAAA,YAAA,GACMC,EAAN,GAAA,YAAA,GACMC,EAAN,GAAA,YAAA,GAEMC,EAAON,EAAMO,sBAAsBC,KACnCC,EAAQT,EAAMO,sBAAsBG,MAEtCJ,GAAAA,GAAQG,EACJ,IACME,IAAAA,EAAO,CACTC,WAAY,qBACZC,UAAWV,EACXW,aAAcT,EACdU,cAAeX,EACfI,KAAMF,IAGJU,EAAAA,EAAAA,SAdW,qCAcO,CACpBC,OAAQ,OACRC,KAASC,KAAKC,UAAUT,GACxBU,QAAS,CAAkB,eAAA,sBAE9BC,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GACFvB,EAAS,KAAM,CACXwB,WAAY,IACZR,KAAMC,KAAKC,UAAUK,OAE1BE,MAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ1B,EAAS,KAAM,CACXwB,WAAY,IACZR,KAAMC,KAAKC,UAAU,CAAEW,MAAiBH,UAAAA,OAAAA,EAAEI,eAsBpD,MAAOJ,GACLC,QAAQC,IAAIF,GACZ1B,EAAS,KAAM,CACXwB,WAAY,IACZR,KAAMC,KAAKC,UAAU,CAAEW,MAAiBH,UAAAA,OAAAA,EAAEI,kBAIlD9B,EAAS,KAAM,CACXwB,WAAY,IACZR,KAAMC,KAAKC,UAAU,CAAEW,MAAO","file":"accessToken.map","sourceRoot":"../../functions","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = self.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = self.fetch.bind(self);\n\nexports.Headers = self.Headers;\nexports.Request = self.Request;\nexports.Response = self.Response;\n","import fetch from 'node-fetch';\n\nexports.handler = function(event, context, callback) {\n    const CLIENT_ID = `${process.env.CLIENT_ID}`;\n    const CLIENT_SECRET = `${process.env.CLIENT_SECRET}`;\n    const REDIRECT_URL = `${process.env.REDIRECT_URL}`;\n    const ACCESS_TOKEN_URL = 'https://api.monzo.com/oauth2/token';\n    const CODE = event.queryStringParameters.code;\n    const STATE = event.queryStringParameters.state;\n\n    if (CODE && STATE) {\n        try {\n            const data = {\n                grant_type: 'authorization_code',\n                client_id: CLIENT_ID,\n                redirect_uri: REDIRECT_URL,\n                client_secret: CLIENT_SECRET,\n                code: CODE\n            };\n\n            fetch(ACCESS_TOKEN_URL, { \n                method: 'POST',\n                body:    JSON.stringify(data),\n                headers: { 'Content-Type': 'application/json' },\n            })\n            .then(res => res.json())\n            .then(result => {\n                callback(null, {\n                    statusCode: 200,\n                    body: JSON.stringify(result)\n                })\n            }).catch((e) => {\n                console.log(e)\n                callback(null, {\n                    statusCode: 500,\n                    body: JSON.stringify({ error: `Error: ${e.message}` })\n                });\n            });\n\n            /*const result = needle('post', ACCESS_TOKEN_URL, {\n                grant_type: 'authorization_code',\n                client_id: CLIENT_ID,\n                redirect_uri: REDIRECT_URL,\n                client_secret: CLIENT_SECRET,\n                code: CODE\n            }).then(() => {\n                callback(null, {\n                    statusCode: 200,\n                    body: JSON.stringify(result)\n                });\n            }).catch((e) => {\n                console.log(e)\n                callback(null, {\n                    statusCode: 500,\n                    body: JSON.stringify({ error: `Error: ${e.message}` })\n                });\n            });*/\n        } catch (e) {\n            console.log(e)\n            callback(null, {\n                statusCode: 500,\n                body: JSON.stringify({ error: `Error: ${e.message}` })\n            });\n        }\n    } else {\n        callback(null, {\n            statusCode: 500,\n            body: JSON.stringify({ error: 'No code provided' })\n        });\n    }\n}\n"]}